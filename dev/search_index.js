var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Codecov)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Combines AcceleratedArrays with either LibSpatialIndex, SpatialIndexing or SortTileRecursiveTree, speeding up area of interest queries, without having to do exact intersections on all geometries. Takes inspiration from the Python rtree package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that as the acceleration works by using the extents of geometries, the filtered list of geometries is not guaranteed to intersect, we only guarantee that all intersecting geometries are present.","category":"page"},{"location":"#Install","page":"Home","title":"Install","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"] add GeoAcceleratedArrays","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Apply a spatial index on a Vector with geometries using accelerate, after which one can quickly find the intersecting extents for a given area of interest by findall with the in predicate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GeoAcceleratedArrays\nusing LibSpatialIndex\nAA = accelerate(A, LibSpatialIndex)\nindices = findall(in(area_of_interest), AA)","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using GeoAcceleratedArrays\nusing LibGEOS  # or any other GeoInterface compatible geometries\n\np1 = readgeom(\"POLYGON((0 0,1 0,1 1,0 0))\");\np2 = readgeom(\"POLYGON((0 0,-1 0,-1 -1,0 0))\");\np3 = readgeom(\"MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)),\n((20 35, 10 30, 10 10, 30 5, 45 20, 20 35),\n(30 20, 20 15, 20 25, 30 20)))\");\nA = [p1, p2, p3];\n\nusing LibSpatialIndex # (or SortTileRecursiveTree or SpatialIndexing)\nacc_polys = accelerate(A, LibSpatialIndex)\n3-element Vector{LibGEOS.AbstractGeometry} + SpatialIndex using Val{LibSpatialIndex}() backend with Extent{(:X, :Y), Tuple{Tuple{Float64, Float64}, Tuple{Float64, Float64}}}((X = (-1.0, 45.0), Y = (-1.0, 45.0))):\n POLYGON ((0 0, 1 0, 1 1, 0 0))\n POLYGON ((0 0, -1 0, -1 -1, 0 0))\n MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35), (30 20, 20 15, 20 25, 30 20)))\n\naoi = Extents.Extent(X=(0.5, 1), Y=(0.5, 1));\n\nindices = findall(in(aoi), acc_polys)\n1-element Vector{Int64}:\n 1","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [GeoAcceleratedArrays]","category":"page"}]
}
